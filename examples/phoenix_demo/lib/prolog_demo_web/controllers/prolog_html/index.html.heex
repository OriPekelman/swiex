<div class="container mx-auto px-2 py-8">
  <h1 class="text-3xl font-bold mb-8 text-center">Swiex - Prolog Query Interface</h1>
  <div class="max-w-7xl mx-auto">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10 md:gap-12">
      <!-- Left: Query Form and Examples -->
      <div class="bg-white rounded-lg shadow-md p-8 md:p-10 mb-8 w-full">
        <h2 class="text-xl font-semibold mb-4">Execute Prolog Query</h2>
        <form id="queryForm" class="space-y-4">
          <div>
            <label for="setupCode" class="block text-sm font-medium text-gray-700 mb-2">
              Setup Code (Optional)
            </label>
            <textarea
              id="setupCode"
              name="setupCode"
              rows="4"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="% Define predicates here&#10;factorial(0, 1).&#10;factorial(N, Result) :- N > 0, N1 is N - 1, factorial(N1, F1), Result is N * F1."
            ></textarea>
          </div>
          <div>
            <label for="queryText" class="block text-sm font-medium text-gray-700 mb-2">
              Prolog Query
            </label>
            <textarea
              id="queryText"
              name="queryText"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="member(X, [1,2,3])"
              rows="4"
              required
            ></textarea>
          </div>
          <button
            type="submit"
            class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Execute Query
          </button>
        </form>
        <div class="bg-white rounded-lg shadow-md p-6 mt-8">
          <h2 class="text-xl font-semibold mb-4">Quick Examples</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              onclick="loadExample('member(X, [1,2,3])')"
              class="p-3 border border-gray-300 rounded-md hover:bg-gray-50 text-left"
            >
              <div class="font-medium">List Membership</div>
              <div class="text-sm text-gray-600">member(X, [1,2,3])</div>
            </button>
            <button
              onclick="loadExample('factorial(5, Result)', 'factorial(0, 1).\nfactorial(N, Result) :- N > 0, N1 is N - 1, factorial(N1, F1), Result is N * F1.')"
              class="p-3 border border-gray-300 rounded-md hover:bg-gray-50 text-left"
            >
              <div class="font-medium">Factorial</div>
              <div class="text-sm text-gray-600">factorial(5, Result)</div>
            </button>
            <button
              onclick="loadExample('double_list([1,2,3], Result)', 'double_list([], []).\ndouble_list([H|T], [H2|T2]) :- H2 is H * 2, double_list(T, T2).')"
              class="p-3 border border-gray-300 rounded-md hover:bg-gray-50 text-left"
            >
              <div class="font-medium">List Processing</div>
              <div class="text-sm text-gray-600">double_list([1,2,3], Result)</div>
            </button>
            <button
              onclick="loadExample('ancestor(john, X)', 'parent(john, mary).\nparent(mary, bob).\nancestor(X, Y) :- parent(X, Y).\nancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).')"
              class="p-3 border border-gray-300 rounded-md hover:bg-gray-50 text-left"
            >
              <div class="font-medium">Family Tree</div>
              <div class="text-sm text-gray-600">ancestor(john, X)</div>
            </button>
          </div>
        </div>
      </div>
      <!-- Right: Live Results -->
      <div class="bg-white rounded-lg shadow-md p-8 md:p-10 mb-8 w-full">
        <div id="results" class="mb-8 hidden">
          <h2 class="text-xl font-semibold mb-4">Query Results</h2>
          <div id="resultsContent"></div>
        </div>
        <div id="error" class="bg-red-50 border border-red-200 rounded-lg p-4 hidden">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">Query Error</h3>
              <div id="errorMessage" class="mt-2 text-sm text-red-700"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function loadExample(query, setupCode = '') {
  document.getElementById('queryText').value = query;
  document.getElementById('setupCode').value = setupCode;
  triggerLiveQuery();
}

let debounceTimeout;
function triggerLiveQuery() {
  clearTimeout(debounceTimeout);
  debounceTimeout = setTimeout(runLiveQuery, 400);
}

async function runLiveQuery() {
  const queryText = document.getElementById('queryText').value;
  const setupCode = document.getElementById('setupCode').value;
  if (!queryText.trim()) {
    document.getElementById('results').classList.add('hidden');
    document.getElementById('error').classList.add('hidden');
    return;
  }
  // Hide previous results/errors
  document.getElementById('results').classList.add('hidden');
  document.getElementById('error').classList.add('hidden');
  try {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    const response = await fetch('/prolog/query', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify({
        query: queryText,
        setupCode: setupCode
      })
    });
    const data = await response.json();
    if (data.success) {
      displayResults(data);
    } else {
      displayError(data.error);
    }
  } catch (error) {
    displayError('Network error: ' + error.message);
  }
}

document.getElementById('queryText').addEventListener('input', triggerLiveQuery);
document.getElementById('setupCode').addEventListener('input', triggerLiveQuery);
document.getElementById('queryForm').addEventListener('submit', function(e) {
  e.preventDefault();
  runLiveQuery();
});

function displayResults(data) {
  const resultsDiv = document.getElementById('results');
  const contentDiv = document.getElementById('resultsContent');
  let html = `
    <div class="mb-4">
      <div class="text-sm text-gray-600 mb-2">Query:</div>
      <div class="font-mono bg-gray-100 p-2 rounded">${data.query}</div>
    </div>
  `;
  if (data.results && data.results.length > 0) {
    html += `
      <div class="mb-4">
        <div class="text-sm text-gray-600 mb-2">Results (${data.results.length} solution${data.results.length > 1 ? 's' : ''}):</div>
        <div class="space-y-2">
    `;
    data.results.forEach((result, index) => {
      html += `
        <div class="bg-green-50 border border-green-200 rounded p-3">
          <div class="text-sm font-medium text-green-800 mb-1">Solution ${index + 1}:</div>
          <div class="font-mono text-sm">
      `;
      Object.entries(result).forEach(([variable, value]) => {
        html += `<div>${variable} = ${JSON.stringify(value)}</div>`;
      });
      html += `
          </div>
        </div>
      `;
    });
    html += `
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="bg-yellow-50 border border-yellow-200 rounded p-3">
        <div class="text-sm text-yellow-800">No solutions found</div>
      </div>
    `;
  }
  contentDiv.innerHTML = html;
  resultsDiv.classList.remove('hidden');
}

function displayError(error) {
  const errorDiv = document.getElementById('error');
  const errorMessage = document.getElementById('errorMessage');
  errorMessage.textContent = error;
  errorDiv.classList.remove('hidden');
}
</script> 